[{"D:\\Projects\\react-hooks-rxjs\\src\\reportWebVitals.js":"1","D:\\Projects\\react-hooks-rxjs\\src\\App.js":"2"},{"size":362,"mtime":1606181106398,"results":"3","hashOfConfig":"4"},{"size":2270,"mtime":1606253809349,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11545ll",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"D:\\Projects\\react-hooks-rxjs\\src\\reportWebVitals.js",[],"D:\\Projects\\react-hooks-rxjs\\src\\App.js",["11"],"import React, { useEffect, useState } from 'react'\nimport { from, BehaviorSubject } from 'rxjs'\n// BehaviorSubject => Requires an initial value and emits the current value to new subscribers\n// A BehaviorSubject holds one value. When it is subscribed it emits the value immediately. A Subject doesn't-\n//-  hold a value.\nimport { distinctUntilChanged, filter, debounceTime, mergeMap } from 'rxjs/operators'\nimport './App.css'\n\nconst getPokemonByName = async name =>{\n  const { results } = await fetch(\"https://pokeapi.co/api/v2/ability/?limit=1000\").then(res => res.json());\n  console.log(results.filter(pokemon => pokemon.name.includes(name)));\n  return results.filter(pokemon => pokemon.name.includes(name));\n}\n\n// BehaviorSubject will be/act the preset pipeline for the value processing\nlet searchSubject = new BehaviorSubject(\"\");\nlet searchResultObservable = searchSubject.pipe(\n  filter(val => val.length > 1), //Make sure that the search results don't thrown any names shorter results\n  debounceTime(750), // wait for the user to complete the typing\n  distinctUntilChanged(), // Preventing a new search, when the user clears the entry and types the same\n  // mapping the value to the new observable created from the getPokemonByName() Promise\n  mergeMap(val => from(getPokemonByName(val)))\n)\n\n// Custom hook\nconst useObservable = (observable, setter) => {\n  useEffect(()=>{\n    let subscription = observable.subscribe(res =>\n      setter(res)\n      );\n      \n      return () => subscription.unsubscribe();\n    }, []);\n  }\n  \nfunction App(){\n  const[ search, setSearch ] = useState('');\n  const[ results, setResults ] = useState([]);\n  \n  useObservable(searchResultObservable, setResults);\n\n  const handleSearchChange = e =>{\n    const searchName = e.target.value;\n    setSearch(searchName);\n    searchSubject.next(searchName);\n  }\n\n  return (\n    <div className=\"App\">\n      &emsp;&emsp;&emsp;<h1>React with RxJS</h1>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <input \n        type=\"text\" \n        placeholder=\"Search\" \n        value={search} \n        onChange={handleSearchChange} \n      /> <br/><br/><br/>\n      {results.map(pokemon => (\n        <div key={pokemon.name}>{pokemon.name}</div>\n      ))}\n    </div>\n  )\n}\n\nexport default App;",{"ruleId":"12","severity":1,"message":"13","line":33,"column":8,"nodeType":"14","endLine":33,"endColumn":10,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'observable' and 'setter'. Either include them or remove the dependency array. If 'setter' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [observable, setter]",{"range":"19","text":"20"},[1520,1522],"[observable, setter]"]